# Version: 1.0.0
# Purpose: Collects, processes, and forwards logs to Elasticsearch for the loan management system's monitoring stack
#
# Required plugins:
# - logstash-input-beats v6.0+
# - logstash-input-cloudwatch v2.0+
# - logstash-filter-grok v4.0+
# - logstash-filter-mutate v3.0+
# - logstash-filter-json v3.0+
# - logstash-output-elasticsearch v10.0+

# Pipeline configuration for performance tuning
pipeline.workers: 4
pipeline.batch.size: 125
pipeline.queue.type: persisted
pipeline.queue.max_bytes: 1gb
filter.workers: 4
output.workers: 4

# Input section - defines log collection sources
input {
  # Filebeat input for collecting logs from application servers
  beats {
    port => 5044
    ssl => true
    ssl_certificate => "/etc/logstash/certificates/logstash.crt"
    ssl_key => "/etc/logstash/certificates/logstash.key"
    ssl_verify_mode => "force_peer"
    tags => ["beats_input"]
  }
  
  # CloudWatch input for AWS service logs
  cloudwatch {
    region => "${AWS_REGION}"
    log_group => ["${LOAN_MANAGEMENT_LOG_GROUP}", "${ECS_LOG_GROUP}", "${RDS_LOG_GROUP}"]
    interval => 60
    type => "cloudwatch_logs"
    tags => ["cloudwatch_input"]
  }
  
  # TCP input for direct application logs
  tcp {
    port => 5000
    codec => json
    tags => ["application_logs"]
  }
  
  # HTTP input for API logging
  http {
    port => 8080
    codec => json
    ssl => true
    ssl_certificate => "/etc/logstash/certificates/logstash.crt"
    ssl_key => "/etc/logstash/certificates/logstash.key"
    tags => ["api_logs"]
  }
}

# Filter section - defines log processing and transformation rules
filter {
  # Common filters for all logs
  mutate {
    add_field => {
      "[@metadata][environment]" => "${ENVIRONMENT:production}"
    }
  }
  
  date {
    match => ["timestamp", "ISO8601"]
  }
  
  # Application log processing
  if "application_logs" in [tags] {
    json {
      source => "message"
      target => "log_data"
    }
    
    mutate {
      rename => {
        "log_data.timestamp" => "@timestamp"
        "log_data.level" => "log_level"
        "log_data.message" => "log_message"
      }
    }
  }
  
  # API log processing
  if "api_logs" in [tags] {
    json {
      source => "message"
      target => "api_data"
    }
    
    mutate {
      rename => {
        "api_data.request_id" => "request_id"
        "api_data.method" => "http_method"
        "api_data.path" => "http_path"
        "api_data.status_code" => "http_status"
        "api_data.response_time" => "response_time_ms"
      }
    }
  }
  
  # CloudWatch log processing
  if "cloudwatch_input" in [tags] {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{GREEDYDATA:log_message}"
      }
    }
  }
  
  # Security log processing
  if [log_type] == "security" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:action} user=%{USERNAME:username} %{GREEDYDATA:details}"
      }
    }
    
    mutate {
      add_tag => ["security_event"]
    }
  }
  
  # PII redaction filter for all logs
  mutate {
    gsub => [
      "message", "\\b\\d{3}-\\d{2}-\\d{4}\\b", "[REDACTED_SSN]",
      "message", "\\b\\d{16}\\b", "[REDACTED_CARD_NUMBER]",
      "message", "password=\\S+", "password=[REDACTED]"
    ]
  }
}

# Output section - defines where logs are sent
output {
  # Primary Elasticsearch output
  elasticsearch {
    hosts => ["https://${ELASTICSEARCH_HOST:elasticsearch}:${ELASTICSEARCH_PORT:9200}"]
    user => "${ELASTICSEARCH_USERNAME:elastic}"
    password => "${ELASTICSEARCH_PASSWORD}"
    ssl => {
      certificate_authority => "/etc/logstash/certificates/ca.crt"
      verification_mode => "certificate"
    }
    index => "%{[@metadata][environment]}-%{[type]}-%{+YYYY.MM.dd}"
    ilm_enabled => true
    ilm_policy => "loan-management-policy"
    ilm_rollover_alias => "loan-management"
  }
  
  # Conditional outputs based on log type
  if "application_logs" in [tags] {
    elasticsearch {
      index => "%{[@metadata][environment]}-application-logs-%{+YYYY.MM.dd}"
    }
  }
  else if "api_logs" in [tags] {
    elasticsearch {
      index => "%{[@metadata][environment]}-api-logs-%{+YYYY.MM.dd}"
    }
  }
  else if "security_event" in [tags] {
    elasticsearch {
      index => "%{[@metadata][environment]}-security-logs-%{+YYYY.MM.dd}"
    }
  }
  else if "cloudwatch_input" in [tags] {
    elasticsearch {
      index => "%{[@metadata][environment]}-aws-logs-%{+YYYY.MM.dd}"
    }
  }
}