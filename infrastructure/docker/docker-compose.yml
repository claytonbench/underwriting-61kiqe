version: '3.8'

services:
  # Backend service running Django
  backend:
    image: loan_management_backend:${TAG:-latest}
    build:
      context: ../../src/backend
      dockerfile: ../../infrastructure/docker/backend.Dockerfile
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 60
    volumes:
      - backend_static:/app/static
      - backend_media:/app/media
    depends_on:
      - db
      - redis
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-loan_management}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME:-us-east-1}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_API_IDENTIFIER=${AUTH0_API_IDENTIFIER}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DOCUSIGN_INTEGRATION_KEY=${DOCUSIGN_INTEGRATION_KEY}
      - DOCUSIGN_USER_ID=${DOCUSIGN_USER_ID}
      - DOCUSIGN_ACCOUNT_ID=${DOCUSIGN_ACCOUNT_ID}
      - DOCUSIGN_PRIVATE_KEY=${DOCUSIGN_PRIVATE_KEY}
    healthcheck:
      test: curl --fail http://localhost:8000/api/health/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery worker for background tasks
  celery:
    image: loan_management_backend:${TAG:-latest}
    build:
      context: ../../src/backend
      dockerfile: ../../infrastructure/docker/backend.Dockerfile
    command: celery -A celery_app worker --loglevel=info
    volumes:
      - backend_media:/app/media
    depends_on:
      - db
      - redis
      - backend
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-loan_management}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME:-us-east-1}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DOCUSIGN_INTEGRATION_KEY=${DOCUSIGN_INTEGRATION_KEY}
      - DOCUSIGN_USER_ID=${DOCUSIGN_USER_ID}
      - DOCUSIGN_ACCOUNT_ID=${DOCUSIGN_ACCOUNT_ID}
      - DOCUSIGN_PRIVATE_KEY=${DOCUSIGN_PRIVATE_KEY}
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery-beat:
    image: loan_management_backend:${TAG:-latest}
    build:
      context: ../../src/backend
      dockerfile: ../../infrastructure/docker/backend.Dockerfile
    command: celery -A celery_app beat --loglevel=info
    depends_on:
      - db
      - redis
      - backend
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-loan_management}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    restart: unless-stopped

  # Frontend service running React
  frontend:
    image: loan_management_frontend:${TAG:-latest}
    build:
      context: ../../src/web
      dockerfile: ../../infrastructure/docker/frontend.Dockerfile
      args:
        - REACT_APP_API_URL=${API_URL:-/api}
        - REACT_APP_AUTH0_DOMAIN=${AUTH0_DOMAIN}
        - REACT_APP_AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
        - REACT_APP_AUTH0_AUDIENCE=${AUTH0_API_IDENTIFIER}
    depends_on:
      - backend
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL database
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME:-loan_management}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    healthcheck:
      test: pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-loan_management}
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for caching and message broker
  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli ping | grep PONG
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx as reverse proxy
  nginx:
    image: nginx:1.23-alpine
    ports:
      - "${PORT:-80}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - backend_static:/var/www/static
      - backend_media:/var/www/media
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:80/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Database initialization service
  db-init:
    image: loan_management_backend:${TAG:-latest}
    volumes:
      - ../scripts/init-db.sh:/init-db.sh
    command: /bin/bash /init-db.sh
    depends_on:
      - db
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DB_HOST=db
      - DB_NAME=${DB_NAME:-loan_management}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_PORT=5432
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@example.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
    restart: on-failure

volumes:
  postgres_data:
  redis_data:
  backend_static:
  backend_media:

networks:
  default:
    name: loan_management_network