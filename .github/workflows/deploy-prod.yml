name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Confirm production deployment'
        required: true
        type: boolean
        default: false

jobs:
  approval:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://app.loanmanagementsystem.com
    steps:
      - name: Check deployment confirmation
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.confirm_deployment != 'true'
        run: echo "Production deployment requires explicit confirmation" && exit 1
      
      - name: Send approval notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            ⚠️ Production deployment awaiting approval! 
            Release: ${{ github.ref_name }}
            Triggered by: ${{ github.actor }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  
  deploy-backend:
    needs: [approval]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.AWS_ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.AWS_ECR_REGISTRY }}/loan-management-backend
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            production
            latest
      
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/backend
          file: ./infrastructure/docker/backend.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ENVIRONMENT=production
      
      - name: Create new task definition revision
        run: |
          aws ecs describe-task-definition --task-definition loan-management-backend-production --query taskDefinition > task-definition.json 
          jq '.containerDefinitions[0].image = "${{ secrets.AWS_ECR_REGISTRY }}/loan-management-backend:production"' task-definition.json > new-task-definition.json 
          aws ecs register-task-definition --cli-input-json file://new-task-definition.json
      
      - name: Create blue/green deployment
        run: |
          aws deploy create-deployment \
            --application-name loan-management-backend \
            --deployment-group-name loan-management-backend-production \
            --revision revisionType=AppSpecContent,appSpecContent={content='version: 0.0,Resources: [{TargetService: {Type: AWS::ECS::Service,Properties: {TaskDefinition: "loan-management-backend-production",LoadBalancerInfo: {ContainerName: "loan-management-backend",ContainerPort: 8000}}}}]'} \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes
  
  deploy-frontend:
    needs: [deploy-backend]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: src/web/yarn.lock
      
      - name: Install dependencies
        run: cd src/web && yarn install --frozen-lockfile
      
      - name: Build frontend
        run: cd src/web && yarn build
        env:
          REACT_APP_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          REACT_APP_AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
          REACT_APP_AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
          REACT_APP_AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
          REACT_APP_ENVIRONMENT: production
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.AWS_ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.AWS_ECR_REGISTRY }}/loan-management-frontend
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            production
            latest
      
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./src/web
          file: ./infrastructure/docker/frontend.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            REACT_APP_API_URL=${{ secrets.PRODUCTION_API_URL }},REACT_APP_AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }},REACT_APP_AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID }},REACT_APP_AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }}
      
      - name: Create new task definition revision
        run: |
          aws ecs describe-task-definition --task-definition loan-management-frontend-production --query taskDefinition > task-definition.json
          jq '.containerDefinitions[0].image = "${{ secrets.AWS_ECR_REGISTRY }}/loan-management-frontend:production"' task-definition.json > new-task-definition.json
          aws ecs register-task-definition --cli-input-json file://new-task-definition.json
      
      - name: Create blue/green deployment
        run: |
          aws deploy create-deployment \
            --application-name loan-management-frontend \
            --deployment-group-name loan-management-frontend-production \
            --revision revisionType=AppSpecContent,appSpecContent={content='version: 0.0,Resources: [{TargetService: {Type: AWS::ECS::Service,Properties: {TaskDefinition: "loan-management-frontend-production",LoadBalancerInfo: {ContainerName: "loan-management-frontend",ContainerPort: 80}}}}]'} \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes
  
  integration-tests:
    needs: [deploy-frontend]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install test dependencies
        run: pip install -r src/backend/requirements-dev.txt
      
      - name: Wait for services to stabilize
        run: sleep 180
      
      - name: Run API integration tests
        run: pytest src/backend/tests/integration/ --base-url=${{ secrets.PRODUCTION_API_URL }} --production-safe
        env:
          TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      
      - name: Run end-to-end tests
        run: cd src/web && yarn test:e2e:production
        env:
          CYPRESS_BASE_URL: ${{ secrets.PRODUCTION_APP_URL }}
          CYPRESS_TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
          CYPRESS_TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      
      - name: Run synthetic transactions
        run: python scripts/synthetic_transactions.py
        env:
          API_URL: ${{ secrets.PRODUCTION_API_URL }}
          APP_URL: ${{ secrets.PRODUCTION_APP_URL }}
          TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      
      - name: Verify performance metrics
        run: python scripts/verify_performance.py --environment=production --threshold=1000
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
      
      - name: Send test results notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            ✅ Production integration tests passed! 
            Release: ${{ github.ref_name }}
            Canary deployment ready for traffic increase.
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  
  canary-deployment:
    needs: [integration-tests]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Increase backend canary traffic
        run: |
          aws deploy update-deployment-group \
            --application-name loan-management-backend \
            --deployment-group-name loan-management-backend-production \
            --deployment-config-name CodeDeployDefault.ECSCanary50Percent5Minutes
      
      - name: Increase frontend canary traffic
        run: |
          aws deploy update-deployment-group \
            --application-name loan-management-frontend \
            --deployment-group-name loan-management-frontend-production \
            --deployment-config-name CodeDeployDefault.ECSCanary50Percent5Minutes
      
      - name: Wait for traffic shift
        run: sleep 300
      
      - name: Monitor error rates
        run: python scripts/monitor_error_rates.py --environment=production --threshold=1.0 --duration=300
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
      
      - name: Send canary status notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            🚀 Production canary deployment at 50% traffic! 
            Release: ${{ github.ref_name }}
            Error rates within acceptable thresholds.
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  
  full-deployment:
    needs: [canary-deployment]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Complete backend deployment
        run: |
          aws deploy continue-deployment \
            --deployment-id $(aws deploy list-deployments --application-name loan-management-backend --deployment-group-name loan-management-backend-production --query 'deployments[0]' --output text) \
            --deployment-wait-type READY_WAIT
      
      - name: Complete frontend deployment
        run: |
          aws deploy continue-deployment \
            --deployment-id $(aws deploy list-deployments --application-name loan-management-frontend --deployment-group-name loan-management-frontend-production --query 'deployments[0]' --output text) \
            --deployment-wait-type READY_WAIT
      
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.PRODUCTION_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
      
      - name: Update deployment tags
        run: |
          aws resourcegroupstaggingapi tag-resources \
            --resource-arn-list $(aws ecs list-services --cluster loan-management-production --query 'serviceArns[]' --output text) \
            --tags Deployment=production,Version=${{ github.ref_name }},DeployedAt=$(date -u +"%Y-%m-%dT%H:%M:%SZ"),DeployedBy=${{ github.actor }}
      
      - name: Send deployment notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            ✅ Production deployment completed successfully! 🎉 
            Release: ${{ github.ref_name }}
            Deployed by: ${{ github.actor }}
            Environment: Production
            Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  
  rollback:
    if: failure()
    needs: [deploy-backend, deploy-frontend, integration-tests, canary-deployment, full-deployment]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Rollback backend deployment
        run: |
          aws deploy stop-deployment \
            --deployment-id $(aws deploy list-deployments --application-name loan-management-backend --deployment-group-name loan-management-backend-production --query 'deployments[0]' --output text) \
            --auto-rollback-enabled
      
      - name: Rollback frontend deployment
        run: |
          aws deploy stop-deployment \
            --deployment-id $(aws deploy list-deployments --application-name loan-management-frontend --deployment-group-name loan-management-frontend-production --query 'deployments[0]' --output text) \
            --auto-rollback-enabled
      
      - name: Wait for rollback to complete
        run: |
          aws ecs wait services-stable \
            --cluster loan-management-production \
            --services loan-management-backend-production loan-management-frontend-production
      
      - name: Invalidate CloudFront cache after rollback
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.PRODUCTION_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
      
      - name: Send rollback notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: |
            ⚠️ Production deployment failed and has been rolled back! 
            Release: ${{ github.ref_name }}
            Triggered by: ${{ github.actor }}
            Please check the GitHub Actions logs for details.
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}